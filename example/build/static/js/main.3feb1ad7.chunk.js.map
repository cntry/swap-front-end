{"version":3,"sources":["../../src/utils/pubkeys.ts","../../src/context/TokenList.tsx","../../src/context/Sollet.tsx","../../src/utils/tokens.ts","../../src/context/Token.tsx","../../src/context/Dex.tsx","../../src/context/Swap.tsx","../../src/components/TokenDialog.tsx","../../src/components/OpenOrdersDialog.tsx","../../src/components/Settings.tsx","../../src/components/WrapperSpace/WrapperSpace.tsx","../../src/components/SwapSubtitle/SwapSubtitle.tsx","../../src/components/SwapApproximately/SwapApproximately.tsx","../../src/components/Swap.tsx","../../src/index.tsx","../../src/components/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DEX_PID","PublicKey","SRM_MINT","USDC_MINT","USDT_MINT","SOL_MINT","WRAPPED_SOL_MINT","WORM_MARKET_BASE","WORM_USDC_MINT","WORM_USDC_MARKET","WORM_USDT_MINT","WORM_USDT_MARKET","_TokenListContext","React","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","SOL_TOKEN_INFO","chainId","address","toString","name","decimals","symbol","logoURI","tags","extensions","website","serumV3Usdc","serumV3Usdt","coingeckoId","waterfallbot","TokenListContextProvider","props","tokenList","useMemo","list","filterByClusterSlug","getList","push","tokenMap","Map","forEach","t","set","swappableTokens","tokens","filter","sort","a","b","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","Provider","value","children","useTokenListContext","ctx","useContext","Error","useTokenMap","fetchSolletInfo","mint","undefined","info","_SOLLET_INFO_CACHE","get","swapApiRequest","infoRaw","splMint","requestWormholeSwapMarketIfNeeded","connection","solletMint","wormholeMint","swapMarket","solletInfo","cached","_SWAP_MARKET_EXISTS_CACHE","getAccountInfo","ticker","catch","console","error","method","path","body","params","headers","cache","JSON","stringify","fetch","resp","handleSwapApiResponse","json","success","SwapApiError","status","result","msg","publicKey","filters","getOwnedAccountsFilters","getProgramAccounts","TOKEN_PROGRAM_ID","commitment","accs","pubkey","account","data","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","Token","getAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","ata","equals","ACCOUNT_LAYOUT","BufferLayout","decode","amount","BN","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","_TokenContext","TokenContextProvider","provider","useState","setRefresh","useEffect","wallet","_OWNED_TOKEN_ACCOUNTS_CACHE","length","r","getOwnedAssociatedTokenAccounts","then","acc","useTokenContext","useOwnedTokenAccount","tokenAccounts","tokenAccount","isSol","listener","onAccountChange","token","index","indexOf","assert","log","removeAccountChangeListener","useMint","asyncMintInfo","useAsync","_MINT_CACHE","mintClient","Account","mintInfo","getMintInfo","FEE_MULTIPLIER","_DexContext","DexContextProvider","ooAccounts","setOoAccounts","swapClient","closeOpenOrders","openOrder","newOoAccounts","openOrders","market","oo","delete","program","OpenOrders","findForOwner","markets","Set","add","size","anchor","rpc","getMultipleAccounts","Array","from","values","m","multipleMarkets","marketClients","programAccount","Market","getLayout","opts","mintPubkeys","baseMintAddress","quoteMintAddress","flat","pk","mints","mintInfos","MintLayout","resolve","baseMintInfo","quoteMintInfo","_baseSplTokenDecimals","_quoteSplTokenDecimals","_MARKET_CACHE","useDexContext","useOpenOrders","useMarket","asyncMarket","marketClient","load","useBbo","orderbook","refresh","asyncOrderbook","_ORDERBOOK_CACHE","loadBids","loadAsks","bids","asks","bidsAddress","OrderbookSide","oldBestBid","items","next","newBestBid","price","asksAddress","oldBestOffer","newBestOffer","useOrderbook","bestBid","bestOffer","mid","useFairRoute","fromMint","toMint","route","useRouteVerbose","useRoute","fromBbo","fromMarket","toBbo","asyncRoute","wormholeSwapMarket","wormholeMarket","kind","WORMHOLE_NATIVE_MAP","wormKey","first","second","conn","wormholeNativeMarket","wormholeSolletMarket","fromWormhole","isFromWormhole","toWormhole","isToWormhole","fromSollet","isFromSollet","toSollet","isToSollet","base","quote","wormholeInfo","erc20Contract","deriveWormholeMarket","baseMint","quoteMint","version","padToTwo","n","slice","seed","createWithSeed","_SwapContext","SwapContextProvider","setFromMint","setToMint","fromAmount","_setFromAmount","toAmount","_setToAmount","isClosingNewAccounts","setIsClosingNewAccounts","isStrict","setIsStrict","slippage","setSlippage","fairOverride","setFairOverride","fair","_useSwapFair","referral","setFromAmount","setToAmount","swapToFromMints","oldFrom","oldTo","useSwapContext","useSwapFair","fairRoute","useStyles","makeStyles","theme","dialogContent","padding","textField","marginBottom","tab","minWidth","tabSelected","color","palette","primary","contrastText","fontWeight","backgroundColor","main","borderRadius","tabIndicator","opacity","TokenDialog","open","onClose","setMint","tabSelection","setTabSelection","tokenFilter","setTokenFilter","toLowerCase","styles","useSwappableTokens","displayTabs","useMediaQuery","selectedTokens","startsWith","Dialog","scroll","PaperProps","style","width","DialogTitle","Typography","variant","paddingBottom","TextField","className","placeholder","fullWidth","onChange","e","target","DialogContent","dividers","List","disablePadding","tokenInfo","TokenListItem","onClick","DialogActions","Tabs","v","classes","indicator","Tab","selected","label","ListItem","button","TokenIcon","TokenName","marginLeft","fontSize","table","closeAccount","OpenOrdersDialog","maxWidth","display","justifyContent","IconButton","Close","paddingTop","OpenOrdersAccounts","openOrdersEntries","entries","TableContainer","component","Paper","elevation","Table","TableHead","TableRow","TableCell","align","TableBody","oos","OpenOrdersRow","ooAccount","setOoAccount","baseWallet","quoteWallet","baseTicker","quoteTicker","marketName","settleDisabled","baseTokenFree","toNumber","quoteTokenFree","closeDisabled","baseTokenTotal","quoteTokenTotal","settleFunds","makeSettleFundsTransaction","transaction","signers","send","_closeOpenOrders","accounts","authority","destination","dexProgram","scope","Link","href","rel","Select","MenuItem","toDisplay","sub","Button","disabled","toFixed","settingsButton","closeAccountSwitchLabel","text","secondary","fairAutoSelected","fairAuto","type","light","boxShadow","SettingsButton","popupState","bindTrigger","Popover","bindPopover","anchorOrigin","vertical","horizontal","transformOrigin","SettingsDetails","showSettingsDialog","setShowSettingsDialog","marginTop","parseFloat","flexDirection","InputProps","endAdornment","InputAdornment","position","marginRight","flex","margin","CloseNewAccountsSwitch","FormGroup","row","FormControlLabel","labelPlacement","control","Switch","checked","WrapperSpace","SwapSubtitle","SwapApproximately","digits","card","spacing","background","border","swapButton","alignItems","height","textTransform","lineHeight","swapButton__img","swapToFromButton","outlineColor","outlineWidth","cursor","transition","amountInput","input","textAlign","swapTokenFormContainer","swapTokenSelectorContainer","balanceContainer","swapTextField","maxButton","tokenButton","tokenSymbol","SwapCard","containerStyle","contentStyle","swapTokenContainerStyle","isConnected","Card","SwapHeader","SwapFromForm","ArrowButton","SwapToForm","SwapButton","src","alt","SwapTokenForm","setAmount","showTokenDialog","setShowTokenDialog","mintAccount","formattedAmount","toLocaleString","maximumFractionDigits","useGrouping","TokenButton","disableUnderline","root","TokenSymbol","useTheme","fromMintInfo","toMintInfo","toMarket","canSwap","fromWallet","useCanSwap","asyncReferral","useReferral","toWallet","sendSwapTransaction","wrappedSolAccount","Keypair","generate","minExchangeRate","rate","muln","divn","fromDecimals","quoteDecimals","strict","fromOpenOrders","toOpenOrders","fromWalletAddr","toWalletAddr","swapTxs","close","txs","wrapSol","wrapTx","tx","wrapSigners","unwrapSol","unwrapTx","unwrapSigners","Transaction","sendAll","disconnect","connect","SystemProgram","getMinBalanceRentForExemptAccount","fromPubkey","newAccountPubkey","space","programId","createAccount","transfer","toPubkey","createInitAccountInstruction","createCloseAccountInstruction","Swap","materialTheme","SwapClient","createTheme","ThemeProvider","header__wallet_icon","header__swap_button","Header","minHeight","paddingLeft","paddingRight","AppInner","enqueueSnackbar","useSnackbar","setIsConnected","setTokenList","preflightCommitment","network","Wallet","Connection","NotifyingProvider","err","action","TokenListProvider","on","Grid","container","onTransaction","newWallet","txSig","this","txSigs","sig","App","maxSnack","autoHideDuration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3feb1ad7.chunk.js","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\n\nexport const DEX_PID = new PublicKey(\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\"\n);\n\nexport const SRM_MINT = new PublicKey(\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\"\n);\n\nexport const USDC_MINT = new PublicKey(\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n);\n\nexport const USDT_MINT = new PublicKey(\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\"\n);\n\n// Arbitrary mint to represent SOL (not wrapped SOL).\nexport const SOL_MINT = new PublicKey(\n  \"Ejmc1UB4EsES5oAaRN63SpoxMJidt3ZGBrqrZk49vjTZ\"\n);\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\n\nexport const WORM_MARKET_BASE = new PublicKey(\n  \"6a9wpsZpZGxGhFVSQBpcTNjNjytdbSA1iUw1A5KNDxPw\"\n);\n\nexport const WORM_USDC_MINT = new PublicKey(\n  \"FVsXUnbhifqJ4LiXQEbpUtXVdB8T5ADLKqSs5t1oc54F\"\n);\n\nexport const WORM_USDC_MARKET = new PublicKey(\n  \"6nGMps9VfDjkKEwYjdSNqN1ToXkLae4VsN49fzBiDFBd\"\n);\n\nexport const WORM_USDT_MINT = new PublicKey(\n  \"9w97GdWUYYaamGwdKMKZgGzPduZJkiFizq4rz5CPXRv2\"\n);\n\nexport const WORM_USDT_MARKET = new PublicKey(\n  \"4v6e6vNXAaEunrvbqkYnKwbaWfck8a2KVR4uRAVXxVwC\"\n);\n","import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nconst SOL_TOKEN_INFO = {\n  chainId: 101,\n  address: SOL_MINT.toString(),\n  name: \"Native SOL\",\n  decimals: \"9\",\n  symbol: \"SOL\",\n  logoURI:\n    \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",\n  tags: [],\n  extensions: {\n    website: \"https://solana.com/\",\n    serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\n    serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\n    coingeckoId: \"solana\",\n    waterfallbot: \"https://t.me/SOLwaterfall\",\n  },\n};\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(() => {\n    const list = props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();\n    // Manually add a fake SOL mint for the native token. The component is\n    // opinionated in that it distinguishes between wrapped SOL and SOL.\n    list.push(SOL_TOKEN_INFO);\n    return list;\n  }, [props.tokenList]);\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isUsdxQuoted =\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n      return isUsdxQuoted;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n","import { useAsync, UseAsyncReturn } from \"react-async-hook\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n// Token info tracked by the sollet bridge.\ntype SolletInfo = {\n  blockchain: string;\n  erc20Contract: string;\n  name: string;\n  splMint: PublicKey;\n  ticker: string;\n};\n\nexport function useSolletInfo(mint: PublicKey): UseAsyncReturn<SolletInfo> {\n  return useAsync(async () => {\n    return fetchSolletInfo(mint);\n  }, [mint]);\n}\n\n// Fetches the token info from the sollet bridge.\nexport async function fetchSolletInfo(mint: PublicKey): Promise<SolletInfo> {\n  let info = _SOLLET_INFO_CACHE.get(mint.toString());\n  if (info !== undefined) {\n    return info;\n  }\n\n  const infoRaw = await swapApiRequest(\"GET\", `coins/sol/${mint.toString()}`);\n  info = { ...infoRaw, splMint: new PublicKey(infoRaw.splMint) };\n  _SOLLET_INFO_CACHE.set(mint.toString(), info!);\n\n  return info!;\n}\n\n// Requests the creation of a sollet wormhole swap market, if it doesn't\n// already exist. Note: this triggers a creation notification. Creation\n// doesn't happen immediately, but at some unspecified point in the future\n// since market makers need to setup on the swap market and provide liquidity.\n//\n// Returns true if the market exists already. False otherwise.\nexport async function requestWormholeSwapMarketIfNeeded(\n  connection: Connection,\n  solletMint: PublicKey,\n  wormholeMint: PublicKey,\n  swapMarket: PublicKey,\n  solletInfo: SolletInfo\n): Promise<boolean> {\n  const cached = _SWAP_MARKET_EXISTS_CACHE.get(swapMarket.toString());\n  if (cached !== undefined) {\n    return cached;\n  }\n  const acc = await connection.getAccountInfo(swapMarket);\n  if (acc === null) {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), false);\n    const resource = `wormhole/pool/${\n      solletInfo.ticker\n    }/${swapMarket.toString()}/${solletMint.toString()}/${wormholeMint.toString()}`;\n    swapApiRequest(\"POST\", resource).catch(console.error);\n    return false;\n  } else {\n    _SWAP_MARKET_EXISTS_CACHE.set(swapMarket.toString(), true);\n    return true;\n  }\n}\n\nexport async function swapApiRequest(\n  method: string,\n  path: string,\n  body?: Object\n) {\n  let headers: any = {};\n  let params: any = { headers, method };\n  if (method === \"GET\") {\n    params.cache = \"no-cache\";\n  } else if (body) {\n    headers[\"Content-Type\"] = \"application/json\";\n    params.body = JSON.stringify(body);\n  }\n  let resp = await fetch(`https://swap.sollet.io/api/${path}`, params);\n  return await handleSwapApiResponse(resp);\n}\n\nasync function handleSwapApiResponse(resp: Response) {\n  let json = await resp.json();\n  if (!json.success) {\n    throw new SwapApiError(json.error, resp.status);\n  }\n  return json.result;\n}\n\nexport class SwapApiError extends Error {\n  readonly name: string;\n  readonly status: number;\n  constructor(msg: string, status: number) {\n    super(msg);\n    this.name = \"SwapApiError\";\n    this.status = status;\n  }\n}\n\nconst _SOLLET_INFO_CACHE = new Map<string, SolletInfo>();\nconst _SWAP_MARKET_EXISTS_CACHE = new Map<string, boolean>();\n","// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedAssociatedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { Provider, BN } from \"@project-serum/anchor\";\nimport { PublicKey, Account } from \"@solana/web3.js\";\nimport {\n  MintInfo,\n  AccountInfo as TokenAccount,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  getOwnedAssociatedTokenAccounts,\n  parseTokenAccountData,\n} from \"../utils/tokens\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\n\nexport type TokenContext = {\n  provider: Provider;\n};\nconst _TokenContext = React.createContext<TokenContext | null>(null);\n\nexport function TokenContextProvider(props: any) {\n  const provider = props.provider;\n  const [, setRefresh] = useState(0);\n\n  // Fetch all the owned token accounts for the wallet.\n  useEffect(() => {\n    if (!provider.wallet.publicKey) {\n      _OWNED_TOKEN_ACCOUNTS_CACHE.length = 0;\n      setRefresh((r) => r + 1);\n      return;\n    }\n    // Fetch SPL tokens.\n    getOwnedAssociatedTokenAccounts(\n      provider.connection,\n      provider.wallet.publicKey\n    ).then((accs) => {\n      if (accs) {\n        // @ts-ignore\n        _OWNED_TOKEN_ACCOUNTS_CACHE.push(...accs);\n        setRefresh((r) => r + 1);\n      }\n    });\n    // Fetch SOL balance.\n    provider.connection\n      .getAccountInfo(provider.wallet.publicKey)\n      .then((acc: { lamports: number }) => {\n        if (acc) {\n          _OWNED_TOKEN_ACCOUNTS_CACHE.push({\n            publicKey: provider.wallet.publicKey,\n            // @ts-ignore\n            account: {\n              amount: new BN(acc.lamports),\n              mint: SOL_MINT,\n            },\n          });\n          setRefresh((r) => r + 1);\n        }\n      });\n  }, [provider.wallet.publicKey, provider.connection]);\n\n  return (\n    <_TokenContext.Provider\n      value={{\n        provider,\n      }}\n    >\n      {props.children}\n    </_TokenContext.Provider>\n  );\n}\n\nfunction useTokenContext() {\n  const ctx = useContext(_TokenContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\n// Null => none exists.\n// Undefined => loading.\nexport function useOwnedTokenAccount(\n  mint?: PublicKey\n): { publicKey: PublicKey; account: TokenAccount } | null | undefined {\n  const { provider } = useTokenContext();\n  const [, setRefresh] = useState(0);\n  const tokenAccounts = _OWNED_TOKEN_ACCOUNTS_CACHE.filter(\n    (account) => mint && account.account.mint.equals(mint)\n  );\n\n  // Take the account with the most tokens in it.\n  tokenAccounts.sort((a, b) =>\n    a.account.amount > b.account.amount\n      ? -1\n      : a.account.amount < b.account.amount\n      ? 1\n      : 0\n  );\n\n  let tokenAccount = tokenAccounts[0];\n  const isSol = mint?.equals(SOL_MINT);\n\n  // Stream updates when the balance changes.\n  useEffect(() => {\n    let listener: number;\n    // SOL is special cased since it's not an SPL token.\n    if (tokenAccount && isSol) {\n      listener = provider.connection.onAccountChange(\n        provider.wallet.publicKey,\n        (info: { lamports: number }) => {\n          const token = {\n            amount: new BN(info.lamports),\n            mint: SOL_MINT,\n          } as TokenAccount;\n          if (token.amount !== tokenAccount.account.amount) {\n            const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n            assert.ok(index >= 0);\n            _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    // SPL tokens.\n    else if (tokenAccount) {\n      listener = provider.connection.onAccountChange(\n        tokenAccount.publicKey,\n        (info) => {\n          if (info.data.length !== 0) {\n            try {\n              const token = parseTokenAccountData(info.data);\n              if (token.amount !== tokenAccount.account.amount) {\n                const index = _OWNED_TOKEN_ACCOUNTS_CACHE.indexOf(tokenAccount);\n                assert.ok(index >= 0);\n                _OWNED_TOKEN_ACCOUNTS_CACHE[index].account = token;\n                setRefresh((r) => r + 1);\n              }\n            } catch (error) {\n              console.log(\"Failed to decode token AccountInfo\");\n            }\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        provider.connection.removeAccountChangeListener(listener);\n      }\n    };\n  }, [provider.connection, tokenAccount]);\n\n  if (mint === undefined) {\n    return undefined;\n  }\n\n  if (!isSol && tokenAccounts.length === 0) {\n    return null;\n  }\n\n  return tokenAccount;\n}\n\nexport function useMint(mint?: PublicKey): MintInfo | undefined | null {\n  const { provider } = useTokenContext();\n  // Lazy load the mint account if needeed.\n  const asyncMintInfo = useAsync(async () => {\n    if (!mint) {\n      return undefined;\n    }\n    if (_MINT_CACHE.get(mint.toString())) {\n      return _MINT_CACHE.get(mint.toString());\n    }\n\n    const mintClient = new Token(\n      provider.connection,\n      mint,\n      TOKEN_PROGRAM_ID,\n      new Account()\n    );\n    const mintInfo = mintClient.getMintInfo();\n    _MINT_CACHE.set(mint.toString(), mintInfo);\n    return mintInfo;\n  }, [provider.connection, mint]);\n\n  if (asyncMintInfo.result) {\n    return asyncMintInfo.result;\n  }\n  return undefined;\n}\n\nexport function setMintCache(pk: PublicKey, account: MintInfo) {\n  _MINT_CACHE.set(pk.toString(), new Promise((resolve) => resolve(account)));\n}\n\n// Cache storing all token accounts for the connected wallet provider.\nconst _OWNED_TOKEN_ACCOUNTS_CACHE: Array<{\n  publicKey: PublicKey;\n  account: TokenAccount;\n}> = [];\n\n// Cache storing all previously fetched mint infos.\n// @ts-ignore\nconst _MINT_CACHE = new Map<string, Promise<MintInfo>>([\n  [SOL_MINT.toString(), { decimals: 9 }],\n]);\n","import React, { useContext, useState, useEffect } from \"react\";\nimport * as assert from \"assert\";\nimport { useAsync } from \"react-async-hook\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { MintLayout } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  Market,\n  OpenOrders,\n  Orderbook as OrderbookSide,\n} from \"@project-serum/serum\";\nimport {\n  DEX_PID,\n  USDC_MINT,\n  USDT_MINT,\n  SOL_MINT,\n  WRAPPED_SOL_MINT,\n  WORM_USDC_MINT,\n  WORM_USDT_MINT,\n  WORM_USDC_MARKET,\n  WORM_USDT_MARKET,\n  WORM_MARKET_BASE,\n} from \"../utils/pubkeys\";\nimport { useTokenMap, useTokenListContext } from \"./TokenList\";\nimport { fetchSolletInfo, requestWormholeSwapMarketIfNeeded } from \"./Sollet\";\nimport { setMintCache } from \"./Token\";\n\nconst BASE_TAKER_FEE_BPS = 0.0022;\nexport const FEE_MULTIPLIER = 1 - BASE_TAKER_FEE_BPS;\n\ntype DexContext = {\n  // Maps market address to open orders accounts.\n  openOrders: Map<string, Array<OpenOrders>>;\n  closeOpenOrders: (openOrder: OpenOrders) => void;\n  swapClient: SwapClient;\n};\nconst _DexContext = React.createContext<DexContext | null>(null);\n\nexport function DexContextProvider(props: any) {\n  const [ooAccounts, setOoAccounts] = useState<Map<string, Array<OpenOrders>>>(\n    new Map()\n  );\n  const swapClient = props.swapClient;\n\n  // Removes the given open orders from the context.\n  const closeOpenOrders = async (openOrder: OpenOrders) => {\n    const newOoAccounts = new Map(ooAccounts);\n    const openOrders = newOoAccounts\n      .get(openOrder.market.toString())\n      ?.filter((oo: OpenOrders) => !oo.address.equals(openOrder.address));\n    if (openOrders && openOrders.length > 0) {\n      newOoAccounts.set(openOrder.market.toString(), openOrders);\n    } else {\n      newOoAccounts.delete(openOrder.market.toString());\n    }\n    setOoAccounts(newOoAccounts);\n  };\n\n  // Three operations:\n  //\n  // 1. Fetch all open orders accounts for the connected wallet.\n  // 2. Batch fetch all market accounts for those open orders.\n  // 3. Batch fetch all mints associated with the markets.\n  useEffect(() => {\n    if (!swapClient.program.provider.wallet.publicKey) {\n      setOoAccounts(new Map());\n      return;\n    }\n    OpenOrders.findForOwner(\n      swapClient.program.provider.connection,\n      swapClient.program.provider.wallet.publicKey,\n      DEX_PID\n    ).then(async (openOrders) => {\n      const newOoAccounts = new Map();\n      let markets = new Set<string>();\n      openOrders.forEach((oo) => {\n        markets.add(oo.market.toString());\n        if (newOoAccounts.get(oo.market.toString())) {\n          newOoAccounts.get(oo.market.toString()).push(oo);\n        } else {\n          newOoAccounts.set(oo.market.toString(), [oo]);\n        }\n      });\n      if (markets.size > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\n          \"Too many markets. Please file an issue to update this\"\n        );\n      }\n      const multipleMarkets = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        Array.from(markets.values()).map((m) => new PublicKey(m))\n      );\n      const marketClients = multipleMarkets.map((programAccount) => {\n        return {\n          publicKey: programAccount?.publicKey,\n          account: new Market(\n            Market.getLayout(DEX_PID).decode(programAccount?.account.data),\n            -1, // Set below so that we can batch fetch mints.\n            -1, // Set below so that we can batch fetch mints.\n            swapClient.program.provider.opts,\n            DEX_PID\n          ),\n        };\n      });\n\n      setOoAccounts(newOoAccounts);\n\n      // Batch fetch all the mints, since we know we'll need them at some\n      // point.\n      const mintPubkeys = Array.from(\n        new Set<string>(\n          marketClients\n            .map((m) => [\n              m.account.baseMintAddress.toString(),\n              m.account.quoteMintAddress.toString(),\n            ])\n            .flat()\n        ).values()\n      ).map((pk) => new PublicKey(pk));\n\n      if (mintPubkeys.length > 100) {\n        // Punt request chunking until there's user demand.\n        throw new Error(\"Too many mints. Please file an issue to update this\");\n      }\n\n      const mints = await anchor.utils.rpc.getMultipleAccounts(\n        swapClient.program.provider.connection,\n        mintPubkeys\n      );\n      const mintInfos = mints.map((mint) => {\n        const mintInfo = MintLayout.decode(mint!.account.data);\n        setMintCache(mint!.publicKey, mintInfo);\n        return { publicKey: mint!.publicKey, mintInfo };\n      });\n\n      marketClients.forEach((m) => {\n        const baseMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.baseMintAddress)\n        )[0];\n        const quoteMintInfo = mintInfos.filter((mint) =>\n          mint.publicKey.equals(m.account.quoteMintAddress)\n        )[0];\n        assert.ok(baseMintInfo && quoteMintInfo);\n        // @ts-ignore\n        m.account._baseSplTokenDecimals = baseMintInfo.mintInfo.decimals;\n        // @ts-ignore\n        m.account._quoteSplTokenDecimals = quoteMintInfo.mintInfo.decimals;\n        _MARKET_CACHE.set(\n          m.publicKey!.toString(),\n          new Promise<Market>((resolve) => resolve(m.account))\n        );\n      });\n    });\n  }, [\n    swapClient.program.provider.connection,\n    swapClient.program.provider.wallet.publicKey,\n    swapClient.program.provider.opts,\n  ]);\n  return (\n    <_DexContext.Provider\n      value={{\n        openOrders: ooAccounts,\n        closeOpenOrders,\n        swapClient,\n      }}\n    >\n      {props.children}\n    </_DexContext.Provider>\n  );\n}\n\nexport function useDexContext(): DexContext {\n  const ctx = useContext(_DexContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useOpenOrders(): Map<string, Array<OpenOrders>> {\n  const ctx = useDexContext();\n  return ctx.openOrders;\n}\n\n// Lazy load a given market.\nexport function useMarket(market?: PublicKey): Market | undefined {\n  const { swapClient } = useDexContext();\n\n  const asyncMarket = useAsync(async () => {\n    if (!market) {\n      return undefined;\n    }\n    if (_MARKET_CACHE.get(market.toString())) {\n      return _MARKET_CACHE.get(market.toString());\n    }\n\n    const marketClient = new Promise<Market>(async (resolve) => {\n      // TODO: if we already have the mints, then pass them through to the\n      //       market client here to save a network request.\n      const marketClient = await Market.load(\n        swapClient.program.provider.connection,\n        market,\n        swapClient.program.provider.opts,\n        DEX_PID\n      );\n      resolve(marketClient);\n    });\n\n    _MARKET_CACHE.set(market.toString(), marketClient);\n    return marketClient;\n  }, [swapClient.program.provider.connection, market]);\n\n  if (asyncMarket.result) {\n    return asyncMarket.result;\n  }\n\n  return undefined;\n}\n\n// Lazy load the orderbook for a given market.\nexport function useOrderbook(market?: PublicKey): Orderbook | undefined {\n  const { swapClient } = useDexContext();\n  const marketClient = useMarket(market);\n  const [refresh, setRefresh] = useState(0);\n\n  const asyncOrderbook = useAsync(async () => {\n    if (!market || !marketClient) {\n      return undefined;\n    }\n    if (_ORDERBOOK_CACHE.get(market.toString())) {\n      return _ORDERBOOK_CACHE.get(market.toString());\n    }\n\n    const orderbook = new Promise<Orderbook>(async (resolve) => {\n      const [bids, asks] = await Promise.all([\n        marketClient.loadBids(swapClient.program.provider.connection),\n        marketClient.loadAsks(swapClient.program.provider.connection),\n      ]);\n\n      resolve({\n        bids,\n        asks,\n      });\n    });\n\n    _ORDERBOOK_CACHE.set(market.toString(), orderbook);\n\n    return orderbook;\n  }, [refresh, swapClient.program.provider.connection, market, marketClient]);\n\n  // Stream in bids updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.bidsAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.bidsAddress,\n        async (info) => {\n          const bids = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestBid = orderbook?.bids.items(true).next().value;\n          const newBestBid = bids.items(true).next().value;\n          if (\n            orderbook &&\n            oldBestBid &&\n            newBestBid &&\n            oldBestBid.price !== newBestBid.price\n          ) {\n            orderbook.bids = bids;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  // Stream in asks updates.\n  useEffect(() => {\n    let listener: number | undefined;\n    if (marketClient?.asksAddress) {\n      listener = swapClient.program.provider.connection.onAccountChange(\n        marketClient?.asksAddress,\n        async (info) => {\n          const asks = OrderbookSide.decode(marketClient, info.data);\n          const orderbook = await _ORDERBOOK_CACHE.get(\n            marketClient.address.toString()\n          );\n          const oldBestOffer = orderbook?.asks.items(false).next().value;\n          const newBestOffer = asks.items(false).next().value;\n          if (\n            orderbook &&\n            oldBestOffer &&\n            newBestOffer &&\n            oldBestOffer.price !== newBestOffer.price\n          ) {\n            orderbook.asks = asks;\n            setRefresh((r) => r + 1);\n          }\n        }\n      );\n    }\n    return () => {\n      if (listener) {\n        swapClient.program.provider.connection.removeAccountChangeListener(\n          listener\n        );\n      }\n    };\n  }, [\n    marketClient,\n    marketClient?.bidsAddress,\n    swapClient.program.provider.connection,\n  ]);\n\n  if (asyncOrderbook.result) {\n    return asyncOrderbook.result;\n  }\n\n  return undefined;\n}\n\nexport function useMarketName(market: PublicKey): string | null {\n  const tokenMap = useTokenMap();\n  const marketClient = useMarket(market);\n  if (!marketClient) {\n    return null;\n  }\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const name = `${baseTicker} / ${quoteTicker}`;\n  return name;\n}\n\n// Fair price for a given market, as defined by the mid.\nexport function useBbo(market?: PublicKey): Bbo | undefined {\n  const orderbook = useOrderbook(market);\n  if (orderbook === undefined) {\n    return undefined;\n  }\n  const bestBid = orderbook.bids.items(true).next().value;\n  const bestOffer = orderbook.asks.items(false).next().value;\n  if (!bestBid && !bestOffer) {\n    return {};\n  }\n  if (!bestBid) {\n    return { bestOffer: bestOffer.price };\n  }\n  if (!bestOffer) {\n    return { bestBid: bestBid.price };\n  }\n  const mid = (bestBid.price + bestOffer.price) / 2.0;\n  return { bestBid: bestBid.price, bestOffer: bestOffer.price, mid };\n}\n\n// Fair price for a theoretical toMint/fromMint market. I.e., the number\n// of `fromMint` tokens to purchase a single `toMint` token. Aggregates\n// across a trade route, if needed.\nexport function useFairRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): number | undefined {\n  const route = useRoute(fromMint, toMint);\n  const fromBbo = useBbo(route ? route[0] : undefined);\n  const fromMarket = useMarket(route ? route[0] : undefined);\n  const toBbo = useBbo(route ? route[1] : undefined);\n\n  if (route === null) {\n    return undefined;\n  }\n\n  if (route.length === 1 && fromBbo !== undefined) {\n    if (fromMarket === undefined) {\n      return undefined;\n    }\n    if (\n      fromMarket?.baseMintAddress.equals(fromMint) ||\n      (fromMarket?.baseMintAddress.equals(WRAPPED_SOL_MINT) &&\n        fromMint.equals(SOL_MINT))\n    ) {\n      return fromBbo.bestBid && 1.0 / fromBbo.bestBid;\n    } else {\n      return fromBbo.bestOffer && fromBbo.bestOffer;\n    }\n  }\n  if (\n    fromBbo === undefined ||\n    fromBbo.bestBid === undefined ||\n    toBbo === undefined ||\n    toBbo.bestOffer === undefined\n  ) {\n    return undefined;\n  }\n  return toBbo.bestOffer / fromBbo.bestBid;\n}\n\nexport function useRoute(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): Array<PublicKey> | null {\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return null;\n  }\n  return route.markets;\n}\n\n// Types of routes.\n//\n// 1. Direct trades on USDC quoted markets.\n// 2. Transitive trades across two USDC qutoed markets.\n// 3. Wormhole <-> Sollet one-to-one swap markets.\n// 4. Wormhole <-> Native one-to-one swap markets.\n//\nexport function useRouteVerbose(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): { markets: Array<PublicKey>; kind: RouteKind } | null {\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const asyncRoute = useAsync(async () => {\n    const swapMarket = await wormholeSwapMarket(\n      swapClient.program.provider.connection,\n      fromMint,\n      toMint,\n      wormholeMap,\n      solletMap\n    );\n    if (swapMarket !== null) {\n      const [wormholeMarket, kind] = swapMarket;\n      return { markets: [wormholeMarket], kind };\n    }\n    const markets = swapClient.route(\n      fromMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : fromMint,\n      toMint.equals(SOL_MINT) ? WRAPPED_SOL_MINT : toMint\n    );\n    if (markets === null) {\n      return null;\n    }\n    const kind: RouteKind = \"usdx\";\n    return { markets, kind };\n  }, [fromMint, toMint, swapClient]);\n\n  if (asyncRoute.result) {\n    return asyncRoute.result;\n  }\n  return null;\n}\n\ntype Orderbook = {\n  bids: OrderbookSide;\n  asks: OrderbookSide;\n};\n\n// Wormhole utils.\n\ntype RouteKind = \"wormhole-native\" | \"wormhole-sollet\" | \"usdx\";\n\n// Maps fromMint || toMint (in sort order) to swap market public key.\n// All markets for wormhole<->native tokens should be here, e.g.\n// USDC <-> wUSDC.\nconst WORMHOLE_NATIVE_MAP = new Map<string, PublicKey>([\n  [wormKey(WORM_USDC_MINT, USDC_MINT), WORM_USDC_MARKET],\n  [wormKey(WORM_USDT_MINT, USDT_MINT), WORM_USDT_MARKET],\n]);\n\nfunction wormKey(fromMint: PublicKey, toMint: PublicKey): string {\n  const [first, second] =\n    fromMint < toMint ? [fromMint, toMint] : [toMint, fromMint];\n  return first.toString() + second.toString();\n}\n\nasync function wormholeSwapMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<[PublicKey, RouteKind] | null> {\n  let market = wormholeNativeMarket(fromMint, toMint);\n  if (market !== null) {\n    return [market, \"wormhole-native\"];\n  }\n  market = await wormholeSolletMarket(\n    conn,\n    fromMint,\n    toMint,\n    wormholeMap,\n    solletMap\n  );\n  if (market === null) {\n    return null;\n  }\n  return [market, \"wormhole-sollet\"];\n}\n\nfunction wormholeNativeMarket(\n  fromMint: PublicKey,\n  toMint: PublicKey\n): PublicKey | null {\n  return WORMHOLE_NATIVE_MAP.get(wormKey(fromMint, toMint)) ?? null;\n}\n\n// Returns the market address of the 1-1 sollet<->wormhole swap market if it\n// exists. Otherwise, returns null.\nasync function wormholeSolletMarket(\n  conn: Connection,\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  wormholeMap: Map<string, TokenInfo>,\n  solletMap: Map<string, TokenInfo>\n): Promise<PublicKey | null> {\n  const fromWormhole = wormholeMap.get(fromMint.toString());\n  const isFromWormhole = fromWormhole !== undefined;\n\n  const toWormhole = wormholeMap.get(toMint.toString());\n  const isToWormhole = toWormhole !== undefined;\n\n  const fromSollet = solletMap.get(fromMint.toString());\n  const isFromSollet = fromSollet !== undefined;\n\n  const toSollet = solletMap.get(toMint.toString());\n  const isToSollet = toSollet !== undefined;\n\n  if ((isFromWormhole || isToWormhole) && isFromWormhole !== isToWormhole) {\n    if ((isFromSollet || isToSollet) && isFromSollet !== isToSollet) {\n      const base = isFromSollet ? fromMint : toMint;\n      const [quote, wormholeInfo] = isFromWormhole\n        ? [fromMint, fromWormhole]\n        : [toMint, toWormhole];\n\n      const solletInfo = await fetchSolletInfo(base);\n\n      if (solletInfo.erc20Contract !== wormholeInfo!.extensions?.address) {\n        return null;\n      }\n\n      const market = await deriveWormholeMarket(base, quote);\n      if (market === null) {\n        return null;\n      }\n\n      const marketExists = await requestWormholeSwapMarketIfNeeded(\n        conn,\n        base,\n        quote,\n        market,\n        solletInfo\n      );\n      if (!marketExists) {\n        return null;\n      }\n\n      return market;\n    }\n  }\n  return null;\n}\n\n// Calculates the deterministic address for the sollet<->wormhole 1-1 swap\n// market.\nasync function deriveWormholeMarket(\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  version = 0\n): Promise<PublicKey | null> {\n  if (version > 99) {\n    console.log(\"Swap market version cannot be greater than 99\");\n    return null;\n  }\n  if (version < 0) {\n    console.log(\"Version cannot be less than zero\");\n    return null;\n  }\n\n  const padToTwo = (n: number) => (n <= 99 ? `0${n}`.slice(-2) : n);\n  const seed =\n    baseMint.toString().slice(0, 15) +\n    quoteMint.toString().slice(0, 15) +\n    padToTwo(version);\n  return await PublicKey.createWithSeed(WORM_MARKET_BASE, seed, DEX_PID);\n}\n\ntype Bbo = {\n  bestBid?: number;\n  bestOffer?: number;\n  mid?: number;\n};\n\nconst _ORDERBOOK_CACHE = new Map<string, Promise<Orderbook>>();\nconst _MARKET_CACHE = new Map<string, Promise<Market>>();\n","import * as assert from \"assert\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useAsync } from \"react-async-hook\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  Token,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Market } from \"@project-serum/serum\";\nimport { SRM_MINT, USDC_MINT, USDT_MINT } from \"../utils/pubkeys\";\nimport {\n  useFairRoute,\n  useRouteVerbose,\n  useDexContext,\n  FEE_MULTIPLIER,\n} from \"./Dex\";\nimport {\n  useTokenListContext,\n  SPL_REGISTRY_SOLLET_TAG,\n  SPL_REGISTRY_WORM_TAG,\n} from \"./TokenList\";\nimport { useOwnedTokenAccount } from \"../context/Token\";\n\nconst DEFAULT_SLIPPAGE_PERCENT = 0.5;\n\nexport type SwapContext = {\n  // Mint being traded from. The user must own these tokens.\n  fromMint: PublicKey;\n  setFromMint: (m: PublicKey) => void;\n\n  // Mint being traded to. The user will receive these tokens after the swap.\n  toMint: PublicKey;\n  setToMint: (m: PublicKey) => void;\n\n  // Amount used for the swap.\n  fromAmount: number;\n  setFromAmount: (a: number) => void;\n\n  // *Expected* amount received from the swap.\n  toAmount: number;\n  setToAmount: (a: number) => void;\n\n  // Function to flip what we consider to be the \"to\" and \"from\" mints.\n  swapToFromMints: () => void;\n\n  // The amount (in units of percent) a swap can be off from the estimate\n  // shown to the user.\n  slippage: number;\n  setSlippage: (n: number) => void;\n\n  // Null if the user is using fairs directly from DEX prices.\n  // Otherwise, a user specified override for the price to use when calculating\n  // swap amounts.\n  fairOverride: number | null;\n  setFairOverride: (n: number | null) => void;\n\n  // The referral *owner* address. Associated token accounts must be created,\n  // first, for this to be used.\n  referral?: PublicKey;\n\n  // True if all newly created market accounts should be closed in the\n  // same user flow (ideally in the same transaction).\n  isClosingNewAccounts: boolean;\n\n  // True if the swap exchange rate should be a function of nothing but the\n  // from and to tokens, ignoring any quote tokens that may have been\n  // accumulated by performing the swap.\n  //\n  // Always false (for now).\n  isStrict: boolean;\n  setIsStrict: (isStrict: boolean) => void;\n\n  setIsClosingNewAccounts: (b: boolean) => void;\n};\nconst _SwapContext = React.createContext<null | SwapContext>(null);\n\nexport function SwapContextProvider(props: any) {\n  const [fromMint, setFromMint] = useState(props.fromMint ?? SRM_MINT);\n  const [toMint, setToMint] = useState(props.toMint ?? USDC_MINT);\n  const [fromAmount, _setFromAmount] = useState(props.fromAmount ?? 0);\n  const [toAmount, _setToAmount] = useState(props.toAmount ?? 0);\n  const [isClosingNewAccounts, setIsClosingNewAccounts] = useState(false);\n  const [isStrict, setIsStrict] = useState(false);\n  const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE_PERCENT);\n  const [fairOverride, setFairOverride] = useState<number | null>(null);\n  const fair = _useSwapFair(fromMint, toMint, fairOverride);\n  const referral = props.referral;\n\n  assert.ok(slippage >= 0);\n\n  useEffect(() => {\n    if (!fair) {\n      return;\n    }\n    setFromAmount(fromAmount);\n  }, [fair]);\n\n  const swapToFromMints = () => {\n    const oldFrom = fromMint;\n    const oldTo = toMint;\n    const oldToAmount = toAmount;\n    _setFromAmount(oldToAmount);\n    setFromMint(oldTo);\n    setToMint(oldFrom);\n  };\n\n  const setFromAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setFromAmount(amount);\n    _setToAmount(FEE_MULTIPLIER * (amount / fair));\n  };\n\n  const setToAmount = (amount: number) => {\n    if (fair === undefined) {\n      _setFromAmount(0);\n      _setToAmount(0);\n      return;\n    }\n    _setToAmount(amount);\n    _setFromAmount((amount * fair) / FEE_MULTIPLIER);\n  };\n\n  return (\n    <_SwapContext.Provider\n      value={{\n        fromMint,\n        setFromMint,\n        toMint,\n        setToMint,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        swapToFromMints,\n        slippage,\n        setSlippage,\n        fairOverride,\n        setFairOverride,\n        isClosingNewAccounts,\n        isStrict,\n        setIsStrict,\n        setIsClosingNewAccounts,\n        referral,\n      }}\n    >\n      {props.children}\n    </_SwapContext.Provider>\n  );\n}\n\nexport function useSwapContext(): SwapContext {\n  const ctx = useContext(_SwapContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useSwapFair(): number | undefined {\n  const { fairOverride, fromMint, toMint } = useSwapContext();\n  return _useSwapFair(fromMint, toMint, fairOverride);\n}\n\nfunction _useSwapFair(\n  fromMint: PublicKey,\n  toMint: PublicKey,\n  fairOverride: number | null\n): number | undefined {\n  const fairRoute = useFairRoute(fromMint, toMint);\n  const fair = fairOverride === null ? fairRoute : fairOverride;\n  return fair;\n}\n\n// Returns true if the user can swap with the current context.\nexport function useCanSwap(): boolean {\n  const { fromMint, toMint, fromAmount, toAmount } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const { wormholeMap, solletMap } = useTokenListContext();\n  const fromWallet = useOwnedTokenAccount(fromMint);\n  const fair = useSwapFair();\n  const route = useRouteVerbose(fromMint, toMint);\n  if (route === null) {\n    return false;\n  }\n\n  return (\n    // From wallet exists.\n    fromWallet !== undefined &&\n    fromWallet !== null &&\n    // Fair price is defined.\n    fair !== undefined &&\n    fair > 0 &&\n    // Mints are distinct.\n    fromMint.equals(toMint) === false &&\n    // Wallet is connected.\n    swapClient.program.provider.wallet.publicKey !== null &&\n    // Trade amounts greater than zero.\n    fromAmount > 0 &&\n    toAmount > 0 &&\n    // Trade route exists.\n    route !== null &&\n    // Wormhole <-> native markets must have the wormhole token as the\n    // *from* address since they're one-sided markets.\n    (route.kind !== \"wormhole-native\" ||\n      wormholeMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_WORM_TAG) !== undefined) &&\n    // Wormhole <-> sollet markets must have the sollet token as the\n    // *from* address since they're one sided markets.\n    (route.kind !== \"wormhole-sollet\" ||\n      solletMap\n        .get(fromMint.toString())\n        ?.tags?.includes(SPL_REGISTRY_SOLLET_TAG) !== undefined)\n  );\n}\n\nexport function useReferral(fromMarket?: Market): PublicKey | undefined {\n  const { referral } = useSwapContext();\n  const asyncReferral = useAsync(async () => {\n    if (!referral) {\n      return undefined;\n    }\n    if (!fromMarket) {\n      return undefined;\n    }\n    if (\n      !fromMarket.quoteMintAddress.equals(USDC_MINT) &&\n      !fromMarket.quoteMintAddress.equals(USDT_MINT)\n    ) {\n      return undefined;\n    }\n\n    return Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      fromMarket.quoteMintAddress,\n      referral\n    );\n  }, [fromMarket]);\n\n  if (!asyncReferral.result) {\n    return undefined;\n  }\n  return asyncReferral.result;\n}\n","import React from 'react';\nimport { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  List,\n  ListItem,\n  Typography,\n  Tabs,\n  Tab,\n} from \"@material-ui/core\";\nimport { TokenIcon } from \"./Swap\";\nimport { useSwappableTokens } from \"../context/TokenList\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogContent: {\n    padding: 0,\n  },\n  textField: {\n    marginBottom: \"8px\",\n  },\n  tab: {\n    minWidth: \"134px\",\n  },\n  tabSelected: {\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: \"10px\",\n  },\n  tabIndicator: {\n    opacity: 0,\n  },\n}));\n\nexport default function TokenDialog({\n  open,\n  onClose,\n  setMint,\n}: {\n  open: boolean;\n  onClose: () => void;\n  setMint: (mint: PublicKey) => void;\n}) {\n  const [tabSelection, setTabSelection] = useState(0);\n  const [tokenFilter, setTokenFilter] = useState(\"\");\n  const filter = tokenFilter.toLowerCase();\n  const styles = useStyles();\n  const { swappableTokens, swappableTokensSollet, swappableTokensWormhole } =\n    useSwappableTokens();\n  const displayTabs = !useMediaQuery(\"(max-width:450px)\");\n  const selectedTokens =\n    tabSelection === 0\n      ? swappableTokens\n      : tabSelection === 1\n      ? swappableTokensWormhole\n      : swappableTokensSollet;\n  let tokens =\n    tokenFilter === \"\"\n      ? selectedTokens\n      : selectedTokens.filter(\n          (t) =>\n            t.symbol.toLowerCase().startsWith(filter) ||\n            t.name.toLowerCase().startsWith(filter) ||\n            t.address.toLowerCase().startsWith(filter)\n        );\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      scroll={\"paper\"}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n          width: \"420px\",\n        },\n      }}\n    >\n      <DialogTitle style={{ fontWeight: \"bold\" }}>\n        <Typography variant=\"h6\" style={{ paddingBottom: \"16px\" }}>\n          Select a token\n        </Typography>\n        <TextField\n          className={styles.textField}\n          placeholder={\"Search name\"}\n          value={tokenFilter}\n          fullWidth\n          variant=\"outlined\"\n          onChange={(e) => setTokenFilter(e.target.value)}\n        />\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent} dividers={true}>\n        <List disablePadding>\n          {tokens.map((tokenInfo: TokenInfo) => (\n            <TokenListItem\n              key={tokenInfo.address}\n              tokenInfo={tokenInfo}\n              onClick={(mint) => {\n                setMint(mint);\n                onClose();\n              }}\n            />\n          ))}\n        </List>\n      </DialogContent>\n      {displayTabs && (\n        <DialogActions>\n          <Tabs\n            value={tabSelection}\n            onChange={(e, v) => setTabSelection(v)}\n            classes={{\n              indicator: styles.tabIndicator,\n            }}\n          >\n            <Tab\n              value={0}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Main\"\n            />\n            <Tab\n              value={1}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Wormhole\"\n            />\n            <Tab\n              value={2}\n              className={styles.tab}\n              classes={{ selected: styles.tabSelected }}\n              label=\"Sollet\"\n            />\n          </Tabs>\n        </DialogActions>\n      )}\n    </Dialog>\n  );\n}\n\nfunction TokenListItem({\n  tokenInfo,\n  onClick,\n}: {\n  tokenInfo: TokenInfo;\n  onClick: (mint: PublicKey) => void;\n}) {\n  const mint = new PublicKey(tokenInfo.address);\n  return (\n    <ListItem\n      button\n      onClick={() => onClick(mint)}\n      style={{ padding: \"10px 20px\" }}\n    >\n      <TokenIcon mint={mint} style={{ width: \"30px\", borderRadius: \"15px\" }} />\n      <TokenName tokenInfo={tokenInfo} />\n    </ListItem>\n  );\n}\n\nfunction TokenName({ tokenInfo }: { tokenInfo: TokenInfo }) {\n  return (\n    <div style={{ marginLeft: \"16px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>\n        {tokenInfo?.symbol}\n      </Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: \"14px\" }}>\n        {tokenInfo?.name}\n      </Typography>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useState, useMemo, useEffect } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { BN } from \"@project-serum/anchor\";\nimport { OpenOrders } from \"@project-serum/serum\";\nimport {\n  makeStyles,\n  Dialog,\n  DialogContent,\n  Paper,\n  Table,\n  TableRow,\n  TableHead,\n  TableCell,\n  TableBody,\n  TableContainer,\n  IconButton,\n  Typography,\n  Button,\n  Select,\n  MenuItem,\n  Link,\n} from \"@material-ui/core\";\nimport { Close } from \"@material-ui/icons\";\nimport { useMarket, useOpenOrders, useDexContext } from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { DEX_PID } from \"../utils/pubkeys\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  closeAccount: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport default function OpenOrdersDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  return (\n    <Dialog\n      maxWidth=\"lg\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        style: {\n          borderRadius: \"10px\",\n        },\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n        }}\n      >\n        <IconButton\n          onClick={onClose}\n          style={{\n            padding: 10,\n          }}\n        >\n          <Close />\n        </IconButton>\n      </div>\n      <DialogContent style={{ paddingTop: 0 }}>\n        <OpenOrdersAccounts />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction OpenOrdersAccounts() {\n  const styles = useStyles();\n  const openOrders = useOpenOrders();\n  const openOrdersEntries: Array<[PublicKey, OpenOrders[]]> = useMemo(() => {\n    return Array.from(openOrders.entries()).map(([market, oo]) => [\n      new PublicKey(market),\n      oo,\n    ]);\n  }, [openOrders]);\n  return (\n    <TableContainer component={Paper} elevation={0}>\n      <Table className={styles.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Market</TableCell>\n            <TableCell align=\"center\">Open Orders Account</TableCell>\n            <TableCell align=\"center\">Base Used</TableCell>\n            <TableCell align=\"center\">Base Free</TableCell>\n            <TableCell align=\"center\">Quote Used</TableCell>\n            <TableCell align=\"center\">Quote Free</TableCell>\n            <TableCell align=\"center\">Settle</TableCell>\n            <TableCell align=\"center\">Close</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {openOrdersEntries.map(([market, oos]) => {\n            return (\n              <OpenOrdersRow\n                key={market.toString()}\n                market={market}\n                openOrders={oos}\n              />\n            );\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction OpenOrdersRow({\n  market,\n  openOrders,\n}: {\n  market: PublicKey;\n  openOrders: Array<OpenOrders>;\n}) {\n  const styles = useStyles();\n  const [ooAccount, setOoAccount] = useState(openOrders[0]);\n  useEffect(() => {\n    setOoAccount(openOrders[0]);\n  }, [openOrders]);\n  const { swapClient, closeOpenOrders } = useDexContext();\n  const marketClient = useMarket(market);\n  const tokenMap = useTokenMap();\n  const base = useMint(marketClient?.baseMintAddress);\n  const quote = useMint(marketClient?.quoteMintAddress);\n  const baseWallet = useOwnedTokenAccount(marketClient?.baseMintAddress);\n  const quoteWallet = useOwnedTokenAccount(marketClient?.quoteMintAddress);\n  const baseTicker = marketClient\n    ? tokenMap.get(marketClient?.baseMintAddress.toString())?.symbol\n    : \"-\";\n  const quoteTicker = marketClient\n    ? tokenMap.get(marketClient?.quoteMintAddress.toString())?.symbol\n    : \"-\";\n  const marketName =\n    baseTicker && quoteTicker\n      ? `${baseTicker} / ${quoteTicker}`\n      : market.toString();\n  const settleDisabled =\n    ooAccount.baseTokenFree.toNumber() + ooAccount.quoteTokenFree.toNumber() ===\n    0;\n  const closeDisabled =\n    ooAccount.baseTokenTotal.toNumber() +\n      ooAccount.quoteTokenTotal.toNumber() !==\n    0;\n\n  const settleFunds = async () => {\n    if (!marketClient) {\n      throw new Error(\"Market client not found\");\n    }\n    if (!baseWallet || !quoteWallet) {\n      throw new Error(\"Base or quote wallet not found\");\n    }\n    const referrerWallet = undefined;\n    const { transaction, signers } =\n      await marketClient.makeSettleFundsTransaction(\n        swapClient.program.provider.connection,\n        ooAccount,\n        baseWallet.publicKey,\n        quoteWallet.publicKey,\n        referrerWallet\n      );\n    await swapClient.program.provider.send(transaction, signers);\n  };\n\n  const _closeOpenOrders = async () => {\n    await swapClient.program.rpc.closeAccount({\n      accounts: {\n        openOrders: ooAccount.address,\n        authority: swapClient.program.provider.wallet.publicKey,\n        destination: swapClient.program.provider.wallet.publicKey,\n        market: marketClient!.address,\n        dexProgram: DEX_PID,\n      },\n    });\n    closeOpenOrders(ooAccount);\n  };\n\n  return (\n    <TableRow key={market.toString()}>\n      <TableCell component=\"th\" scope=\"row\">\n        <Typography>\n          <Link\n            href={`https://dex.projectserum.com/#/market/${market.toString()}`}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            {marketName}\n          </Link>\n        </Typography>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Select\n          value={ooAccount.address.toString()}\n          onChange={(e) =>\n            setOoAccount(\n              openOrders.filter(\n                (oo) => oo.address.toString() === e.target.value\n              )[0]\n            )\n          }\n        >\n          {openOrders.map((oo) => {\n            return (\n              <MenuItem\n                key={oo.address.toString()}\n                value={oo.address.toString()}\n              >\n                {oo.address.toString()}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenTotal.sub(ooAccount.baseTokenFree))}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(base, ooAccount.baseTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(\n          quote,\n          ooAccount.quoteTokenTotal.sub(ooAccount.quoteTokenFree)\n        )}\n      </TableCell>\n      <TableCell align=\"center\">\n        {toDisplay(quote, ooAccount.quoteTokenFree)}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button color=\"primary\" disabled={settleDisabled} onClick={settleFunds}>\n          Settle\n        </Button>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Button\n          disabled={closeDisabled}\n          onClick={_closeOpenOrders}\n          className={styles.closeAccount}\n        >\n          Close\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n}\n\nfunction toDisplay(mintInfo: MintInfo | undefined | null, value: BN): string {\n  if (!mintInfo) {\n    return value.toNumber().toString();\n  }\n  return (value.toNumber() / 10 ** mintInfo.decimals).toFixed(\n    mintInfo.decimals\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport {\n  makeStyles,\n  Popover,\n  IconButton,\n  Typography,\n  Button,\n  TextField,\n  InputAdornment,\n  Switch,\n  FormControlLabel,\n  FormGroup,\n} from \"@material-ui/core\";\nimport { SettingsOutlined as Settings } from \"@material-ui/icons\";\nimport PopupState, { bindTrigger, bindPopover } from \"material-ui-popup-state\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport { useDexContext } from \"../context/Dex\";\nimport OpenOrdersDialog from \"./OpenOrdersDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  tab: {\n    width: \"50%\",\n  },\n  table: {},\n  settingsButton: {\n    padding: 0,\n    color: theme.palette.primary.main,\n  },\n  closeAccountSwitchLabel: {\n    color: theme.palette.text.secondary,\n  },\n  fairAutoSelected: {\n    backgroundColor: theme.palette.primary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    color: theme.palette.primary.contrastText,\n    fontWeight: 700,\n  },\n  fairAuto: {\n    backgroundColor:\n      theme.palette.type === \"dark\"\n        ? theme.palette.secondary.light\n        : theme.palette.secondary.main,\n    padding: \"3px 5px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\",\n  },\n}));\n\nexport function SettingsButton() {\n  const styles = useStyles();\n\n  return (\n    <PopupState variant=\"popover\">\n      {\n        //@ts-ignore\n        (popupState) => (\n          <div>\n            <IconButton\n              {...bindTrigger(popupState)}\n              className={styles.settingsButton}\n            >\n              <Settings />\n            </IconButton>\n            <Popover\n              {...bindPopover(popupState)}\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\",\n              }}\n              transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"right\",\n              }}\n              PaperProps={{\n                style: {\n                  borderRadius: \"10px\",\n                  boxShadow: \"0px 0px 30px 5px rgba(0,0,0,0.075)\",\n                },\n              }}\n            >\n              <SettingsDetails />\n            </Popover>\n          </div>\n        )\n      }\n    </PopupState>\n  );\n}\n\nfunction SettingsDetails() {\n  const styles = useStyles();\n\n  const { slippage, setSlippage, fairOverride, setFairOverride } =\n    useSwapContext();\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const fair = useSwapFair();\n  const { swapClient } = useDexContext();\n\n  const setSlippageHandler = (value?: number) => {\n    setSlippage(!value || value < 0 ? 0 : value);\n  };\n\n  return (\n    <div style={{ padding: \"15px\", width: \"305px\" }}>\n      <Typography style={{ fontWeight: \"bold\" }}>Settings</Typography>\n      <div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Slippage tolerance\n          </Typography>\n          <TextField\n            type=\"number\"\n            placeholder=\"Error tolerance percentage\"\n            value={slippage}\n            onChange={(e) => setSlippageHandler(parseFloat(e.target.value))}\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Typography color=\"textSecondary\" style={{ fontSize: \"12px\" }}>\n            Fair price\n          </Typography>\n          <div style={{ display: \"flex\" }}>\n            <TextField\n              type=\"number\"\n              placeholder=\"Fair price override\"\n              value={fair}\n              onChange={(e) => setFairOverride(parseFloat(e.target.value))}\n              style={{\n                marginRight: \"10px\",\n                flex: 1,\n                display: \"flex\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n              }}\n              disabled={fairOverride === null}\n            />\n            <Button\n              component=\"div\"\n              variant=\"contained\"\n              onClick={() => {\n                if (fair === undefined) {\n                  console.error(\"Fair is undefined\");\n                  return;\n                }\n                if (fairOverride === null) {\n                  setFairOverride(fair);\n                } else {\n                  setFairOverride(null);\n                }\n              }}\n              className={\n                fairOverride === null\n                  ? styles.fairAutoSelected\n                  : styles.fairAuto\n              }\n            >\n              Auto\n            </Button>\n          </div>\n        </div>\n        <div style={{ margin: \"10px 0px\" }}>\n          <CloseNewAccountsSwitch />\n        </div>\n        <Button\n          variant=\"contained\"\n          fullWidth\n          disabled={swapClient.program.provider.wallet.publicKey === null}\n          onClick={() => setShowSettingsDialog(true)}\n        >\n          Manage Dex Accounts\n        </Button>\n      </div>\n      <OpenOrdersDialog\n        open={showSettingsDialog}\n        onClose={() => setShowSettingsDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction CloseNewAccountsSwitch() {\n  const styles = useStyles();\n  const { isClosingNewAccounts, setIsClosingNewAccounts } = useSwapContext();\n\n  return (\n    <FormGroup style={{ display: \"none\" }} row>\n      <FormControlLabel\n        classes={{ label: styles.closeAccountSwitchLabel }}\n        labelPlacement=\"start\"\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginLeft: 0,\n          width: \"100%\",\n        }}\n        control={\n          <Switch\n            checked={isClosingNewAccounts}\n            onChange={() => setIsClosingNewAccounts(!isClosingNewAccounts)}\n            color=\"primary\"\n          />\n        }\n        label=\"Close new accounts\"\n      />\n    </FormGroup>\n  );\n}\n","import React from 'react';\nimport './WrapperSpace.css';\n\nexport const WrapperSpace = (props: any) => {\n  return(\n    <div className=\"wrapper__space\">\n      {props.children}\n    </div>\n  );\n}\n\n\n","import React from 'react';\nimport './SwapSubtitle.css';\n\nexport const SwapSubtitle = ({text}:any) => {\n  return(\n    <div className=\"swap__subtitle\">\n      {text}\n    </div>\n  );\n}\n\n\n","import React from 'react';\nimport './SwapApproximately.css';\n\n\nexport const SwapApproximately = ({digits}: any) => {\n    return(\n      <div className=\"swap__approximately\">\n        {digits}\n      </div>\n    );\n}\n","import React from 'react';\nimport { useState } from \"react\";\nimport {\n  PublicKey,\n  Keypair,\n  Transaction,\n  SystemProgram,\n  Signer,\n} from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport {\n  makeStyles,\n  Card,\n  Button,\n  Typography,\n  TextField,\n  useTheme,\n} from \"@material-ui/core\";\n// import { ExpandMore, ImportExportRounded } from \"@material-ui/icons\";\nimport { useSwapContext, useSwapFair } from \"../context/Swap\";\nimport {\n  useDexContext,\n  useOpenOrders,\n  useRouteVerbose,\n  useMarket,\n  FEE_MULTIPLIER,\n} from \"../context/Dex\";\nimport { useTokenMap } from \"../context/TokenList\";\nimport { useMint, useOwnedTokenAccount } from \"../context/Token\";\nimport { useCanSwap, useReferral } from \"../context/Swap\";\nimport TokenDialog from \"./TokenDialog\";\nimport { SettingsButton } from \"./Settings\";\n// import { InfoLabel } from \"./Info\";\nimport { SOL_MINT, WRAPPED_SOL_MINT } from \"../utils/pubkeys\";\n\nimport {WrapperSpace} from '../../src/components/WrapperSpace/WrapperSpace';\nimport {SwapSubtitle} from '../../src/components/SwapSubtitle/SwapSubtitle';\nimport {SwapApproximately} from '../../src/components/SwapApproximately/SwapApproximately';\n// import { SwapInfoLeft } from './SwapInfoLeft/SwapInfoLeft';\n// import { SwapInfoRight } from './SwapInfoRight/SwapInfoRight';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    width: theme.spacing(50),\n    borderRadius: \"4px\",\n    boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.05)\",\n    padding: \"13px 17px 18px 15px\",\n    background: \"#ffffff\",\n    border: \"1px solid rgba(0, 0, 0, 0.05)\",\n  },\n  tab: {\n    width: \"50%\",\n  },\n  settingsButton: {\n    padding: 0,\n  },\n  // swapButton: {\n  //   width: \"100%\",\n  //   borderRadius: theme.spacing(2),\n  //   backgroundColor: theme.palette.primary.main,\n  //   // backgroundColor: \"blue\",\n  //   color: theme.palette.primary.contrastText,\n  //   fontSize: 16,\n  //   fontWeight: 700,\n  //   padding: theme.spacing(1.5),\n  //   cursor: \"pointer\",\n  // },\n  swapButton: {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"38px\",\n    background: \"#fff\",\n    textTransform: \"capitalize\",\n    border: \"2px solid #2F80ED\",\n    color: \"#2F80ED\",\n    fontWeight: 500,\n    fontSize: 16,    \n    lineHeight: \"22px\",\n    //Temporarily margin-top\n    marginTop: \"21px\",\n  },\n  swapButton__img: {\n    marginRight: \"13px\",\n  },\n  swapToFromButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"none\",\n    outlineColor: \"transparent\",\n    outlineWidth: \"0px\",\n    // margin: \"10px auto 10px auto\",\n    cursor: \"pointer\",\n    width: \"32px\",\n    height: \"32px\",\n    backgroundColor: \"#2F80ED\",\n    borderRadius: \"4px\",\n    margin: \"16px auto 0 auto\",\n    transition: \".2s ease-in-out\",\n    \"&:active, &:focus\": {\n      outlineColor: \"transparent\",\n      outlineWidth: \"0px\",\n    },\n    \"&:hover\": {\n      backgroundColor: \"#226ac9\",\n      transition: \".2s ease-in-out\",\n    }\n  },\n  amountInput: {\n    fontSize: 14,\n    fontWeight: 400,\n  },\n  input: {\n    textAlign: \"right\",\n    paddingBottom: \"0px\",\n    paddingTop: \"3px\",\n  },\n  swapTokenFormContainer: {\n    // borderRadius: theme.spacing(2),\n    // boxShadow: \"0px 0px 15px 2px rgba(33,150,243,0.1)\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    // padding: theme.spacing(1),\n    marginTop: \"4px\",\n    padding: \"8px 16px\",\n    background: \"rgba(47, 128, 237, 0.1)\",\n    borderRadius: \"4px\",\n\n  },\n  swapTokenSelectorContainer: {\n    marginLeft: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"50%\",\n    '& > div':{\n      fontWeight: 400,\n    }\n  },\n  balanceContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"14px\",\n  },\n  swapTextField: {\n    // fontWeight: 400,\n    // fontSize: \"14px\",\n    border: \"1px solid blue\",\n    \"div\": {\n      fontWeight: 400,\n      fontSize: \"14px\",\n    }\n\n  },\n  maxButton: {\n    marginLeft: theme.spacing(1),\n    color: theme.palette.primary.main,\n    fontWeight: 700,\n    fontSize: \"12px\",\n    cursor: \"pointer\",\n  },\n  tokenButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    // marginBottom: theme.spacing(1),\n  },\n  tokenSymbol: {\n    display: \"block\",\n    textAlign: \"left\",\n    minWidth: \"38px\",\n    fontSize: \"14px\",\n    lineHeight: \"22px\",\n    // height: \"22px\",\n    // margin: \"9px 16px 9px 0\",\n    marginTop: \"3px\",\n  }\n}));\n\nexport default function SwapCard({\n  containerStyle,\n  contentStyle,\n  swapTokenContainerStyle,\n  isConnected,\n  wallet,\n}: {\n  containerStyle?: any;\n  contentStyle?: any;\n  swapTokenContainerStyle?: any;\n  isConnected: boolean;\n  wallet: any;\n}) {\n  const styles = useStyles();\n  return (\n    <Card className={styles.card} style={containerStyle}>\n      <SwapHeader />\n      <div style={contentStyle}>\n        <WrapperSpace>\n          <SwapSubtitle text=\"You pay\" />\n          <SwapApproximately digits=\"≈ $123.33\" />\n        </WrapperSpace>\n        <SwapFromForm style={swapTokenContainerStyle} />\n        <ArrowButton />\n        <WrapperSpace>\n          <SwapSubtitle text=\"You receive\" />\n          <SwapApproximately digits=\"≈ $123.33 (-0.22%)\" />\n        </WrapperSpace>\n        <SwapToForm style={swapTokenContainerStyle} />\n        {/* <InfoLabel /> */}\n        {/* <div style={{ \n            marginBottom: \"21px\",\n            paddingLeft: \"15px\",\n          }}\n        >\n          <WrapperSpace>\n            <SwapInfoLeft text=\"1*Solara cost\" />\n            <SwapInfoRight approximateValue=\"≈ $123.33\" tokenValue=\"0.0002323223 VSYS\" />\n          </WrapperSpace>\n          <WrapperSpace>\n            <SwapInfoLeft text=\"1*V.system cost\" />\n            <SwapInfoRight approximateValue=\"≈ $9999.33\" tokenValue=\"234,9984302001 SOL\" />\n          </WrapperSpace>\n          <WrapperSpace>\n            <SwapInfoLeft text=\"Transaction Fee\" />\n            <SwapInfoRight approximateValue=\"≈ $0.32\" tokenValue=\"0.0032 SOL\" />\n          </WrapperSpace>\n        </div> */}\n        <SwapButton \n          isConnected={isConnected}\n          wallet={wallet}\n        />\n      </div>\n    </Card>\n  );\n}\n\nexport function SwapHeader() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        marginBottom: \"20px\",\n      }}\n    >\n      <Typography\n        style={{\n          fontSize: 24,\n          fontWeight: 700,\n          lineHeight: '24px',\n          color: '#2F80ED'\n        }}\n      >\n        Swap\n      </Typography>\n      <SettingsButton />\n    </div>\n  );\n}\n\nexport function ArrowButton() {\n  const styles = useStyles();\n  // const theme = useTheme();\n  const { swapToFromMints } = useSwapContext();\n  return (\n    // <ImportExportRounded\n    //   className={styles.swapToFromButton}\n    //   fontSize=\"large\"\n    //   htmlColor={theme.palette.primary.main}\n    //   onClick={swapToFromMints}\n    // />\n    <button\n      className={styles.swapToFromButton}\n      onClick={swapToFromMints}\n    >\n      <img src=\"arrowSwap.svg\" alt=\"arrowSwap\" />\n    </button>\n  );\n}\n\nfunction SwapFromForm({ style }: { style?: any }) {\n  const { fromMint, setFromMint, fromAmount, setFromAmount } = useSwapContext();\n  // console.log(fromMint, 'fromMint');\n  // console.log(fromAmount, 'fromAmount');\n  return (\n    <SwapTokenForm\n      from\n      style={style}\n      mint={fromMint}\n      setMint={setFromMint}\n      amount={fromAmount}\n      setAmount={setFromAmount}\n    />\n  );\n}\n\nfunction SwapToForm({ style }: { style?: any }) {\n  const { toMint, setToMint, toAmount, setToAmount } = useSwapContext();\n  // console.log(toMint, 'toMint');\n  // console.log(toAmount, 'toAmount');\n  return (\n    <SwapTokenForm\n      from={false}\n      style={style}\n      mint={toMint}\n      setMint={setToMint}\n      amount={toAmount}\n      setAmount={setToAmount}\n    />\n  );\n}\n\nexport function SwapTokenForm({\n  from,\n  style,\n  mint,\n  setMint,\n  amount,\n  setAmount,\n}: {\n  from: boolean;\n  style?: any;\n  mint: PublicKey;\n  setMint: (m: PublicKey) => void;\n  amount: number;\n  setAmount: (a: number) => void;\n}) {\n  const styles = useStyles();\n\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const tokenAccount = useOwnedTokenAccount(mint);\n  const mintAccount = useMint(mint);\n\n  const balance =\n    tokenAccount &&\n    mintAccount &&\n    tokenAccount.account.amount.toNumber() / 10 ** mintAccount.decimals;\n\n  const formattedAmount =\n    mintAccount && amount\n      ? amount.toLocaleString(\"fullwide\", {\n          maximumFractionDigits: mintAccount.decimals,\n          useGrouping: false,\n        })\n      : amount;\n\n  // console.log(formattedAmount);\n  // console.log(amount);\n\n  return (\n    <div className={styles.swapTokenFormContainer} style={style}>\n      <div className={styles.swapTokenSelectorContainer}>\n        <TokenButton mint={mint} onClick={() => setShowTokenDialog(true)} />\n        {/* <Typography color=\"textSecondary\" className={styles.balanceContainer}>\n          {tokenAccount && mintAccount\n            ? `Balance: ${balance?.toFixed(mintAccount.decimals)}`\n            : `-`}\n          {from && !!balance ? (\n            <p\n              className={styles.maxButton}\n              onClick={() => setAmount(balance)}\n            >\n              MAX\n            </p>\n          ) : null}\n        </Typography> */}\n      </div>\n      <TextField\n        type=\"number\"\n        value={formattedAmount}\n        // className={styles.swapTextField}\n        // InputProps={{\n        //   className: styles.swapTextField,\n        // }}\n        onChange={(e) => setAmount(parseFloat(e.target.value))}\n        InputProps={{\n          disableUnderline: true,\n          classes: {\n            root: styles.amountInput,\n            input: styles.input,\n          },\n        }}\n      />\n      <TokenSymbol mint={mint} />\n      <TokenDialog\n        setMint={setMint}\n        open={showTokenDialog}\n        onClose={() => setShowTokenDialog(false)}\n      />\n    </div>\n  );\n}\n\nfunction TokenButton({\n  mint,\n  onClick,\n}: {\n  mint: PublicKey;\n  onClick: () => void;\n}) {\n  const styles = useStyles();\n  const theme = useTheme();\n\n  return (\n    <div onClick={onClick} className={styles.tokenButton}>\n      <TokenIcon mint={mint} style={{ width: theme.spacing(3) }} />\n      <TokenName mint={mint} style={{ fontSize: 14, fontWeight: 400, margin: \"3px 8px 0 4px\", color: \"#000\" }} />\n      {/* <ExpandMore /> */}\n      <img style={{ margin: \"3px 0 0 0\" }}  src=\"arrowDown.svg\" alt=\"arrowDown\" />\n    </div>\n  );\n}\n\nexport function TokenIcon({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      {tokenInfo?.logoURI ? (\n        <img alt=\"Logo\" style={style} src={tokenInfo?.logoURI} />\n      ) : (\n        <div style={style}></div>\n      )}\n    </div>\n  );\n}\n\nfunction TokenName({ mint, style }: { mint: PublicKey; style: any }) {\n  const tokenMap = useTokenMap();\n  const theme = useTheme();\n  let tokenInfo = tokenMap.get(mint.toString());\n\n  return (\n    <Typography\n      style={{\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n        ...style,\n      }}\n    >\n      {/* {tokenInfo?.symbol} */}\n      {tokenInfo?.name}\n    </Typography>\n  );\n}\n\nfunction TokenSymbol({ mint }: { mint: PublicKey } ) {\n  const styles = useStyles();\n  const tokenMap = useTokenMap();\n  let tokenInfo = tokenMap.get(mint.toString());\n\n  return (\n    <span\n      className={styles.tokenSymbol}\n    >\n      {tokenInfo?.symbol}\n    </span>\n  )\n}\n\nexport function SwapButton(props: {\n  isConnected: boolean;\n  wallet: any;\n}) {\n  const {\n    isConnected,\n    wallet,\n  } = props;\n  \n  const styles = useStyles();\n  const {\n    fromMint,\n    toMint,\n    fromAmount,\n    slippage,\n    isClosingNewAccounts,\n    isStrict,\n  } = useSwapContext();\n  const { swapClient } = useDexContext();\n  const fromMintInfo = useMint(fromMint);\n  const toMintInfo = useMint(toMint);\n  const openOrders = useOpenOrders();\n  const route = useRouteVerbose(fromMint, toMint);\n  const fromMarket = useMarket(\n    route && route.markets ? route.markets[0] : undefined\n  );\n  const toMarket = useMarket(\n    route && route.markets ? route.markets[1] : undefined\n  );\n  const canSwap = useCanSwap();\n  const referral = useReferral(fromMarket);\n  const fair = useSwapFair();\n  let fromWallet = useOwnedTokenAccount(fromMint);\n  let toWallet = useOwnedTokenAccount(toMint);\n  const quoteMint = fromMarket && fromMarket.quoteMintAddress;\n  const quoteMintInfo = useMint(quoteMint);\n  const quoteWallet = useOwnedTokenAccount(quoteMint);\n\n  // Click handler.\n  const sendSwapTransaction = async () => {\n    if (!fromMintInfo || !toMintInfo) {\n      throw new Error(\"Unable to calculate mint decimals\");\n    }\n    if (!fair) {\n      throw new Error(\"Invalid fair\");\n    }\n    if (!quoteMint || !quoteMintInfo) {\n      throw new Error(\"Quote mint not found\");\n    }\n\n    const amount = new BN(fromAmount * 10 ** fromMintInfo.decimals);\n    const isSol = fromMint.equals(SOL_MINT) || toMint.equals(SOL_MINT);\n    const wrappedSolAccount = isSol ? Keypair.generate() : undefined;\n\n    // Build the swap.\n    let txs = await (async () => {\n      if (!fromMarket) {\n        throw new Error(\"Market undefined\");\n      }\n\n      const minExchangeRate = {\n        rate: new BN((10 ** toMintInfo.decimals * FEE_MULTIPLIER) / fair)\n          .muln(100 - slippage)\n          .divn(100),\n        fromDecimals: fromMintInfo.decimals,\n        quoteDecimals: quoteMintInfo.decimals,\n        strict: isStrict,\n      };\n      const fromOpenOrders = fromMarket\n        ? openOrders.get(fromMarket?.address.toString())\n        : undefined;\n      const toOpenOrders = toMarket\n        ? openOrders.get(toMarket?.address.toString())\n        : undefined;\n      const fromWalletAddr = fromMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : fromWallet\n        ? fromWallet.publicKey\n        : undefined;\n      const toWalletAddr = toMint.equals(SOL_MINT)\n        ? wrappedSolAccount!.publicKey\n        : toWallet\n        ? toWallet.publicKey\n        : undefined;\n\n      return await swapClient.swapTxs({\n        fromMint,\n        toMint,\n        quoteMint,\n        amount,\n        minExchangeRate,\n        referral,\n        fromMarket,\n        toMarket,\n        // Automatically created if undefined.\n        fromOpenOrders: fromOpenOrders ? fromOpenOrders[0].address : undefined,\n        toOpenOrders: toOpenOrders ? toOpenOrders[0].address : undefined,\n        fromWallet: fromWalletAddr,\n        toWallet: toWalletAddr,\n        quoteWallet: quoteWallet ? quoteWallet.publicKey : undefined,\n        // Auto close newly created open orders accounts.\n        close: isClosingNewAccounts,\n      });\n    })();\n\n    // If swapping SOL, then insert a wrap/unwrap instruction.\n    if (isSol) {\n      if (txs.length > 1) {\n        throw new Error(\"SOL must be swapped in a single transaction\");\n      }\n      const { tx: wrapTx, signers: wrapSigners } = await wrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair,\n        fromMint,\n        amount\n      );\n      const { tx: unwrapTx, signers: unwrapSigners } = unwrapSol(\n        swapClient.program.provider,\n        wrappedSolAccount as Keypair\n      );\n      const tx = new Transaction();\n      tx.add(wrapTx);\n      tx.add(txs[0].tx);\n      tx.add(unwrapTx);\n      txs[0].tx = tx;\n      txs[0].signers.push(...wrapSigners);\n      txs[0].signers.push(...unwrapSigners);\n    }\n\n    await swapClient.program.provider.sendAll(txs);\n  };\n  return (\n    <>\n      {canSwap \n      ? (\n        <Button\n          variant=\"contained\"\n          className={styles.swapButton}\n          onClick={sendSwapTransaction}\n          // disabled={!canSwap}\n        >\n          Swap\n        </Button>\n      ) \n      : (\n        <Button\n          // variant=\"contained\"\n          variant=\"outlined\"\n          className={styles.swapButton}\n          onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        >\n          <img\n            className={styles.swapButton__img}\n            src=\"wallet.svg\"\n            alt=\"wallet\"\n          />\n          Connect Wallet\n        </Button>\n      )}\n    </>\n    \n  );\n}\n\nasync function wrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair,\n  fromMint: PublicKey,\n  amount: BN\n): Promise<{ tx: Transaction; signers: Array<Signer | undefined> }> {\n  const tx = new Transaction();\n  const signers = [wrappedSolAccount];\n  // Create new, rent exempt account.\n  tx.add(\n    SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: wrappedSolAccount.publicKey,\n      lamports: await Token.getMinBalanceRentForExemptAccount(\n        provider.connection\n      ),\n      space: 165,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n  // Transfer lamports. These will be converted to an SPL balance by the\n  // token program.\n  if (fromMint.equals(SOL_MINT)) {\n    tx.add(\n      SystemProgram.transfer({\n        fromPubkey: provider.wallet.publicKey,\n        toPubkey: wrappedSolAccount.publicKey,\n        lamports: amount.toNumber(),\n      })\n    );\n  }\n  // Initialize the account.\n  tx.add(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      WRAPPED_SOL_MINT,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey\n    )\n  );\n  return { tx, signers };\n}\n\nfunction unwrapSol(\n  provider: Provider,\n  wrappedSolAccount: Keypair\n): { tx: Transaction; signers: Array<Signer | undefined> } {\n  const tx = new Transaction();\n  tx.add(\n    Token.createCloseAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      wrappedSolAccount.publicKey,\n      provider.wallet.publicKey,\n      provider.wallet.publicKey,\n      []\n    )\n  );\n  return { tx, signers: [] };\n}\n","import React from 'react';\nimport { ReactElement } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  createTheme,\n  ThemeOptions,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport {\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n} from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useBbo,\n  useFairRoute,\n  useMarketName,\n} from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, {\n  ArrowButton,\n  SwapButton,\n  SwapHeader,\n  SwapTokenForm,\n} from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\nexport default function Swap(props: SwapProps): ReactElement {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral,\n    isConnected,\n    wallet,\n  } = props;\n\n  // @ts-ignore\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createTheme(\n    materialTheme || {\n      palette: {\n        primary: {\n          main: \"#2196F3\",\n          contrastText: \"#FFFFFF\",\n        },\n        secondary: {\n          main: \"#E0E0E0\",\n          light: \"#595959\",\n        },\n        error: {\n          main: \"#ff6b6b\",\n        },\n      },\n    }\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TokenListContextProvider tokenList={tokenList}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n              referral={referral}\n            >\n              <SwapCard\n                containerStyle={containerStyle}\n                contentStyle={contentStyle}\n                swapTokenContainerStyle={swapTokenContainerStyle}\n                isConnected={isConnected}\n                wallet={wallet}\n              />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </TokenListContextProvider>\n    </ThemeProvider>\n  );\n}\n\n/**\n * Properties for the `Swap` Component.\n */\nexport type SwapProps = {\n  /**\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\n   * into all transactions intitiated by the component.\n   */\n  provider: Provider;\n\n  /**\n   * Token list providing information for tokens used.\n   */\n  tokenList: TokenListContainer;\n\n  /**\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\n   * To receive referral fees, the wallet must *own* associated token\n   * accounts for the token in which the referral is paid  (usually USDC\n   * or USDT).\n   */\n  referral?: PublicKey;\n\n  /**\n   * The default `fromMint` to use when the component first renders.\n   */\n  fromMint?: PublicKey;\n\n  /**\n   * The default `toMint` to use when the component first renders.\n   */\n  toMint?: PublicKey;\n\n  /**\n   * The initial amount for the `fromMint` to use when the component first\n   * renders.\n   */\n  fromAmount?: number;\n\n  /**\n   * The initial amount for the `toMint` to use when the component first\n   * renders.\n   */\n  toAmount?: number;\n\n  /**\n   * Provide custom material-ui theme.\n   */\n  materialTheme?: ThemeOptions;\n\n  /**\n   * Styling properties for the main container.\n   */\n  containerStyle?: any;\n\n  /**\n   * Styling properties for the content container.\n   */\n  contentStyle?: any;\n\n  /**\n   * Styling properties for the from and to token containers.\n   */\n  swapTokenContainerStyle?: any;\n  \n  isConnected: boolean;\n  wallet: any;\n};\n\nexport {\n  // Components.\n  Swap,\n  SwapCard,\n  SwapHeader,\n  SwapTokenForm,\n  ArrowButton,\n  SwapButton,\n  TokenDialog,\n  // Providers and context.\n  // Swap.\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n  // TokenList.\n  TokenListContextProvider,\n  useTokenMap,\n  // Token.\n  TokenContextProvider,\n  useMint,\n  // Dex.\n  DexContextProvider,\n  useFairRoute,\n  useMarketName,\n  useBbo,\n};\n","import './Header.css';\n\nimport {\n  makeStyles,\n  Button,\n  // Switch,\n} from \"@material-ui/core\";\nimport React from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  header__wallet_icon: {\n    marginRight: \"4px\",\n    marginBottom: \"2px\",\n  },\n  header__swap_button: {\n    width: \"100%\",\n    borderRadius: theme.spacing(2),\n    // backgroundColor: theme.palette.primary.main,\n    // backgroundColor: \"#2196F3\",\n    // color: theme.palette.primary.contrastText,\n    fontSize: 14,\n    lineHeight: \"22px\",\n    // padding: theme.spacing(1.5),\n    cursor: \"pointer\",\n  },\n  // switchTheme: {\n  //   backgroundColor: \"#2196F3\",\n  // }\n}));\n\nexport const Header = (props: {\n  isConnected: boolean;\n  wallet: any;\n}) => {\n  const {\n    isConnected,\n    wallet,\n  } = props;\n\n  const styles = useStyles();\n\n  return (\n    <section\n      className=\"header\"\n    >\n      <img src=\"logo.svg\" alt=\"logo\" />\n      <div className=\"header__menu wrapper\">\n        <a\n          href=\"https://cntry.io/\"\n          className=\"header__menu_punct link\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          home\n        </a>\n        <a\n          href=\"https://swap.cntry.io/\"\n          className=\"header__menu_punct link header__menu_punct-active\"\n        >\n          swap\n        </a>\n        {/* <a\n          href=\"#/\"\n          className=\"header__menu_punct link\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          trade\n        </a>\n        <a\n          href=\"#/\"\n          className=\"header__menu_punct link header__menu_punct-active\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          ido\n        </a>\n        <a\n          href=\"#/\"\n          className=\"header__menu_punct link\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          token\n        </a> */}\n      </div>\n      {/* <div className=\"header__info\">\n        <div className=\"wrapper\">\n            <div className=\"header__circle header__circle_green\"></div>\n            <div className=\"header__info_text green\">Trade Open</div>\n        </div>\n        <div className=\"header__info_date\">Wednesday, 05 January 202 14:00 WIB</div>\n      </div>\n      <img className=\"header__loupe\" src=\"loupe.svg\" alt=\"loupe\" /> */}\n      {/* <div className=\"header__lang wrapper\">\n        <img className=\"header__lang_chosen\" src=\"usaFlag.svg\" alt=\"flag\" />\n        <img src=\"vector.svg\" alt=\"vector\" />\n      </div> */}\n      <div className=\"header__wallet wrapper\">\n        <img\n          className={styles.header__wallet_icon}\n          src=\"wallet.svg\"\n          alt=\"wallet\"\n        />\n        {/* <div className=\"header__wallet_text\">Connect Wallet</div> */}\n        <div\n          className={styles.header__swap_button}\n          onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        >\n          Connect Wallet\n        </div>\n      </div>\n      {/* <div className=\"header__switcher wrapper\">\n        <img src=\"light.svg\" alt=\"lightTheme\" />\n        <Switch \n          color=\"primary\"\n        />\n        <div className=\"header__switcher_btn\">\n            <div className=\"header__switcher_btn-toggler\"></div>\n        </div>\n        <img src=\"dark.svg\" alt=\"darkTheme\" />\n      </div> */}\n    </section>\n  )\n};\n ","import React from 'react';\nimport \"@fontsource/roboto\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Signer,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\n\nimport { Header } from '../../src/components/Header/Header';\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"calc(100vh - 75px)\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n  },\n}));\n\nfunction AppInner() {\n  const styles = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <>\n      <Header\n        isConnected={isConnected}\n        wallet={wallet}\n      />\n      <Grid\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={styles.root}\n      >\n        {/* <Button\n          variant=\"outlined\"\n          onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n          style={{ position: \"fixed\", right: 24, top: 75 }}\n        >\n          {!isConnected ? \"Connect\" : \"Disconnect\"}\n        </Button> */}\n        {tokenList\n          && <Swap\n              provider={provider}\n              tokenList={tokenList}\n              isConnected={isConnected}\n              wallet={wallet}\n            />\n        }\n      </Grid>\n    </>\n  );\n}\n\n// Cast wallet to AnchorWallet in order to be compatible with Anchor's Provider class\ninterface AnchorWallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    const newWallet = wallet as AnchorWallet;\n    super(connection, newWallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return \"\";\n    }\n  }\n\n  async sendAll(\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach((sig) => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return [];\n    }\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}